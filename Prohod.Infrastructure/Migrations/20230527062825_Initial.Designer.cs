// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prohod.Infrastructure.Database;

#nullable disable

namespace Prohod.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20230527062825_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prohod.Domain.Forms.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("UserToVisitId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserToVisitId");

                    b.HasKey("Id");

                    b.HasIndex("UserToVisitId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Prohod.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prohod.Domain.VisitRequests.VisitRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid")
                        .HasColumnName("FormId");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WhoProcessedId")
                        .HasColumnType("uuid")
                        .HasColumnName("WhoProcessedId");

                    b.HasKey("Id");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.HasIndex("WhoProcessedId");

                    b.ToTable("VisitRequests");
                });

            modelBuilder.Entity("Prohod.Domain.Forms.Form", b =>
                {
                    b.HasOne("Prohod.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserToVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Prohod.Domain.Forms.EmailToSendReply", "EmailToSendReply", b1 =>
                        {
                            b1.Property<Guid>("FormId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("EmailToSendReply");

                            b1.HasKey("FormId");

                            b1.ToTable("Forms");

                            b1.WithOwner()
                                .HasForeignKey("FormId");
                        });

                    b.OwnsOne("Prohod.Domain.Forms.Passport", "Passport", b1 =>
                        {
                            b1.Property<Guid>("FormId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FullName");

                            b1.Property<DateTimeOffset>("IssueDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("IssueDate");

                            b1.Property<string>("PassportNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PassportNumber");

                            b1.Property<string>("PassportSeries")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PassportSeries");

                            b1.Property<string>("WhoIssued")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("WhoIssued");

                            b1.HasKey("FormId");

                            b1.ToTable("Forms");

                            b1.WithOwner()
                                .HasForeignKey("FormId");
                        });

                    b.OwnsOne("Prohod.Domain.Forms.VisitTime", "VisitTime", b1 =>
                        {
                            b1.Property<Guid>("FormId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("VisitTime");

                            b1.HasKey("FormId");

                            b1.ToTable("Forms");

                            b1.WithOwner()
                                .HasForeignKey("FormId");
                        });

                    b.Navigation("EmailToSendReply")
                        .IsRequired();

                    b.Navigation("Passport")
                        .IsRequired();

                    b.Navigation("VisitTime")
                        .IsRequired();
                });

            modelBuilder.Entity("Prohod.Domain.Users.User", b =>
                {
                    b.OwnsOne("Prohod.Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Prohod.Domain.Users.Login", "Login", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Login");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Prohod.Domain.Users.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Prohod.Domain.Users.PasswordHash", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Prohod.Domain.Users.Surname", "Surname", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Surname");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Login")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();

                    b.Navigation("Surname")
                        .IsRequired();
                });

            modelBuilder.Entity("Prohod.Domain.VisitRequests.VisitRequest", b =>
                {
                    b.HasOne("Prohod.Domain.Forms.Form", null)
                        .WithOne()
                        .HasForeignKey("Prohod.Domain.VisitRequests.VisitRequest", "FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prohod.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("WhoProcessedId");

                    b.OwnsOne("Prohod.Domain.VisitRequests.RejectionReason", "RejectionReason", b1 =>
                        {
                            b1.Property<Guid>("VisitRequestId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("RejectionReason");

                            b1.HasKey("VisitRequestId");

                            b1.ToTable("VisitRequests");

                            b1.WithOwner()
                                .HasForeignKey("VisitRequestId");
                        });

                    b.Navigation("RejectionReason");
                });
#pragma warning restore 612, 618
        }
    }
}
